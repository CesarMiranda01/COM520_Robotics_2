#include <Pixy2.h>

class PixyTracker {
private:
    Pixy2 pixy;

    int windowSize;   // Tama침o del filtro de suavizado
    int minWidth;     // Tama침o m칤nimo de objeto v치lido
    int maxWidth;     // Tama침o m치ximo antes de ignorar
    int maxMisses;    // Frames sin detecci칩n antes de detener

    int *xValues;     // Buffer din치mico para suavizar X
    int index;
    int missCount;

    // M칠todo de suavizado (Promedio M칩vil)
    int smoothX(int newX) {
        xValues[index] = newX;
        index = (index + 1) % windowSize;

        int sum = 0;
        for (int i = 0; i < windowSize; i++) {
            sum += xValues[i];
        }
        return sum / windowSize;
    }

public:
    // Constructor con par치metros configurables (con valores por defecto)
    PixyTracker(int _windowSize = 5, int _minWidth = 10, int _maxWidth = 200, int _maxMisses = 10) 
        : windowSize(_windowSize), minWidth(_minWidth), maxWidth(_maxWidth), maxMisses(_maxMisses), index(0), missCount(0) {
        
        // Crear el buffer din치mico con el tama침o de windowSize
        xValues = new int[windowSize];
        for (int i = 0; i < windowSize; i++) {
            xValues[i] = 0;
        }
    }

    // Destructor para liberar memoria
    ~PixyTracker() {
        delete[] xValues;
    }

    void begin() {
        pixy.init();
    }

    // M칠todo para obtener la coordenada X del objeto m치s grande en el eje X
    int getSmoothedX() {
        pixy.ccc.getBlocks();

        if (pixy.ccc.numBlocks > 0) {
            int maxWidthFound = 0;
            int targetX = 0;

            for (int i = 0; i < pixy.ccc.numBlocks; i++) {
                int xRaw = pixy.ccc.blocks[i].m_x;
                int width = pixy.ccc.blocks[i].m_width;

                // Filtrar objetos demasiado peque침os o demasiado grandes
                if (width < minWidth || width > maxWidth) {
                  missCount++;
                    continue;
                }

                // Seleccionar el objeto con el mayor ancho
                if (width > maxWidthFound) {
                    maxWidthFound = width;
                    targetX = xRaw;
                }
            }

            if (maxWidthFound > 0) { // Se encontr칩 un objeto v치lido
                missCount = 0;  // 游댳 Reiniciamos el contador porque s칤 hay detecci칩n

                int xMapped = map(targetX, 0, 316, -100, 100);
                return smoothX(xMapped); // Retorna el valor suavizado
            }
        } else {
            missCount++;  // 游댳 Aumentamos el contador si no se detecta nada
        }

        // Si ha fallado demasiadas veces, detener el coche
        if (missCount >= maxMisses) {
            return 999;  // C칩digo especial para detenerse
        }

        return 0;  // Mantiene el 칰ltimo valor si sigue sin detectar
    }
};
